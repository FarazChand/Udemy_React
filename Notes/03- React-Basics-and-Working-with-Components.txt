Intro
-----
- this section is about learning how to build component-driven UI, the component concept is embraced by React
- we learn what componenets are and why exactly React embraces them

This mean we learn:
- React Core Syntax & JSX
- What Components are and how to work with them 
- Working with Data
- All the key concepts needed for every React App you will build


What are Components? And why is React all About Them?
-----------------------------------------------------
- React is a JS library for building UI, in general, so are HTML, CSS and JS
- we use libraries like React because they simplify building complex, interactive and reactive user interfaces
- in order to achieve this, React uses 'Components'

- components are reusable building blocks in your user interface
- components are just a combination of HTML code, CSS for styling and possibly JS for logic
- reusability is just a trait of a component, not a requirement

- all user interfaces are made up of components(building blocks)
- pretty much everything you see on a UI is a component, except for text itself(althought that could probably be a component as well if we wanted)
- for example, on twitter, each post is a component - each icon is a component, these components are stored in other components - which are stored in other components
- containers, buttons, input elements, etc.. all are components
- all user interfaces can be split up into components

- React is all about these components
- you build these individual components, and then you tell React how to compose them together into a final user interface
- React embraces this concept of components because:
	-> of the reusability aspect (avoid repetition and DRY)
	-> it allows us to seperate our concerns (Don't do too many things in one and the same place, keeps codebase small and managable)
 		-> instead of having one file for all the html code, and one for all the JS code for the entire UI...
		-> we have small, seperate units (components) where every component has one clear concern/focus
		-> if we split this code throughout multiple files, we have small pieces of code which are easy to manage and maintain
		-> this is simillar to splitting big chunks of code into multiple smaller functions


React is Written in a 'Declarative Way'!
----------------------------------------
- react allows you to create re-usable and reactive components consisting of HTML and JS (and then some CSS after), which we then use to build user interfaces
- react uses something called a 'declarative' approach
	-> define the desired target state(s) and let React figure out the actual JavaScript Dom instructions
- pretty much build our own, custom HTML elements which we combine together to build a user interface


Creating a New React Project
-----------------------------
- the easiest way to get started with a react project is to use a tool called create-react-app
- full documentation on google or create-react-app.dev
- preconfigured folders with some basic React code files and important configuration files
- these configuration files help you build the react app for production use
- projects created this way will give you a nice dev environment with a development web server 
- this allows you to preview the application locally on your machine, in a way that the browser automatically updates the page when you make changes to your code
- so it simplifies our development process, adds a couple of key transformation steps that we need - and later also helps us optimize our React code before we push it to a production server

Node.js:
- in order to execute the above steps, you first need node.js installed 
- node.js is a runtime for JS, which allows you to run JS outside of the browser
- not needed for React, however, we need it to run the create-react-app tool command
- behind the scenes, the project generated by this tool will use node.js for the development preview server as well as the transformation and optimization steps
- download the latest version (i think the recommended is better but ok)

How to use create-react-app tool:
	npx create-react-app my-app
	cd my-app
	npm start

- use the above commands in the vs code command line
- the first line creates a new react project folder(takes a minute), the second line navigates into that folder
- the last line runs a special script which exists inside of the project folder to bring up a development server (opens on localhost: 3000)

The Project Folder:
- the files in this folder might change over time - don't worry, as long as the main things are there you're good
- you should see a src folder and a package.json file
	-> the package.json file holds all the dependencies of the file, the exact names and versions of these packages will change over time but it does not impact how React works
	-> the src folder holds the actual source code you will be working on

Note that in Max's course, he tells us to download a 'cleaned up' version of this starter project folder, which excludes some files and folders
Also note that you can stop the dev environment from running by pressing ctrl+c in the command line it was ran in


Installing Packages:
- vscode has your default system terminal/command prompt integrated into it - so we can run commands from there (ctrl+` shortcut to open terminal)
- we can run: npm install
	-> this downloads all the packages and dependencies listed in your package.json file into this project folder 
	-> the vscode terminal will automatically navigate into this project folder
	-> these dependencies are not included in the zip file because it would bloat it uneccessarily - making downloading them a nightmare
	-> in most projects this is the proccess, downloading the starter files, then downloading the dependencies (in the projects you don't start from scratch)

- once ran, it will create a folder called 'node_modules' which holds all of these dependencies
	-> should never edit or work in these folders, they are third party code that we will import and should not be changed

After this we can run npm start again:
- this starts the development preview server again
- should keep this open while you are working on the project to see any changes
- can always close it by press ctrl+c in the terminal, and restart it by using npm start in the terminal
- as long as this process is running, it will automatically watch your code files - any time a change happens, it will automatically update the loaded page in the browser


Analyzing the Standard React Project
-------------------------------------
- the src folder is where we will spend the majority of our time, and where we will write our react code
- important to understand that React is just javascript - it's just syntactic sugar that makes our lives easier as developers
- the 'npm start' command we used to run our dev environment also takes this syntactic sugar and transforms it into actual javascript code before executing it
- essentially, we can write code in a more modern and efficient way - but it will still be transformed to code that will work on all browsers 

- note that the 'index.js' file is the first file to be executed - very important to know this
- in the index.js file:
	-> we import ReactDom from the react 3rd party library, making that feature available inside of index.js
	-> ReactDom is like an object that has methods and properties, imported from the React library

- we use the createRoot method on ReactDom to create a main entry point(main hook) of the overall UI you are about to build with react 
	-> this tells React where the react application should be placed in the webpage(the html)

In the public folder, we have our index.html file. We will rarely be in this file but it is the single html file of the project 
- this is a regular html file
- in this html file, there is an empty div within the body with the class of root - it's just a regular div
- it is labeled as such because it is where we want to inject the react driven UI(the UI we build with react)


So in the index.js file, we select this root element in the DOM by using a normal document.getElementByID method - setting the main entry point
- this is passed to the ReactDom.createRoot() method as an argument, the result is an object and is stored in a variable called 'root'.
- this root object has a method called .render(), which takes an argument (a component) and renders it to the webpage
- what this essentially does is takes the argument and injects it into the main entry point (the root div we selected earlier)

What we pass into .render() is the App component, which is actually an import from one of our own files in the src folder called App.js
- note that when importing JS files, we can omit the .js extension, but for files like css files, we keep the extension
   	eg. root.render(<App />); // renders the App component inside of the root element

- App is a component, which we pass into render using JSX syntax (will explain later)
- it will be inserted inside of the root element of our html
- like we said before, App is imported into our index.js from the App.js file - this is where it is stored

- if we take a closer look at the App.js file, we will see that it contains a function name App, and has a default export of App (the function)
- this function returns what looks to be html, a div with an h2 inside of it that has a title as content
- however, this is not HTML, this is JSX, as it is being used within JavaScript
- since it is exported from this file and being imported into index.js, we can use its features in index.js (this is how importing and exporting in modern JS works)
 

Introducing JSX
---------------
- a special syntax invented and introduced by the react team
- it works in our JS files because of our overall project set up (transformation steps running behind the scenes)
- its basically HTML inside of JS
- stands for 'JavaScript XML' (apparently HTML is XML at the end of the day)
- this code will be automatcally transformed into usable code, this is syntactic sugar again (code that is easy to write, also works in the browser)


How React Works
---------------
- Remember that a component is a custom html element
- remember that React also takes a declarative approach - meaning, we define the desired target state and let React figure out the atual JS DOM instructions
- in our App.js file, in the App function - The jsx that is returned is the desired state, we want to render the 'HTML' within that return statement
- in our index.js, we tell React to render the imported App component inside of our root element
- the App component aka the custom App HTML element, and is being rendered inside the root element at this point
- this custom element is just the exported function from App.js, whose return value is the JSX (the HTML code) 
- this JSX is ultimately what we see on the webpage 
- what ever is inside of this JSX (as long as its formatted correctly) will be injected into the root element as it appears in the JSX

- note that in regular JS, you would have to take a lot more steps - create a new element, set its content, append it to another element (imparetive, step by step)
- this works, but becomes cumbersome in complex UIs
- with React, we just define the desired end state, and React will generate all of the DOM instructions behind the scenes to render it on to the screen


Building a First Custom Component
---------------------------------
- we could build this component in the same App.js file, but it is best practice to build new componenets in their own new files, one file per component
- this means that a React project with dozens or hundreds of components will also have just as many files, which is totally normal
- to organize the code a little bit better, we can add a component folder in our src folder, which will hold all our component source files
- App.js will not be placed in this folder because it is a special kind of component, regarding its role in the application
	-> it's the 'root' component, its the main component being rendered in our starting file index.js
	-> all other componenets will be either nested inside of App.js or nested inside of other componenets, which then in turn again are nested somewhere else

- In React, we build a Component Tree
	-> we have the main App componenet at the top
	-> below that we have any other kinds of custom HTML elements
	-> these other components can hold more components, etc
	-> big applications can result in quite big component trees, where only the top most component is rendered directly into the HTML page (with help from the ReactDom render instruction)
 	-> all the other components will not be rendered with this instruction
	-> instead, they will be used as regular HTML elements inside of our HTML code inside of our components

- its a common convention in React applications to name your component files like this:
	-> Starting with a capital character
	-> CamelCase
	-> one word
	-> should have a component that renders something related to what the name of the file is (if not exactly what the name is)
	-:> ^this way the file name tells us what type of logic and HTML code will live inside of that file

- How do we write a component in react?
	-> it's important to understand that a component in react is just a JS function
	-> it is only special in regards to what it returns, which is JSX 
	-> so essentially, we write a function declaration with an identifier matching the file name
	-> this function will return the JSX code that we want to be rendered by this component
	-> to use this component, we need to export it to make it available outside of this file (can export as default)
	-> we then import it into the file that has the HTML we wish to render(nest) it in - in this case it will be the App.js file
	-> note that we do not import it into index.js because we already have our root component rendered in that file
	-> instead we want to use our custom component like a regular HTML element and insert it into our App component's JSX
	-> the key difference between a custom component and a regular HTML element is that it starts with a capital letter
	-> custom components MUST start with a Capital letter so that React can detect that it is a custom component
	-> note that we have to use the name that we specified as an import, since that is how the connection was established


Writing More Complex JSX Code
-----------------------------
- when writing JSX code in a component, you can only have ONE root component
- this means that you cant have two elements that are siblings, only one parent element - though, within this parent you can have more elements that have siblings and children
- also, by default - you can't make code readable by putting the JSX on new lines like in normal HTML 
- however, you can achieve readability by wrapping the JSX in parenthesis (), and then adding new lines and indents where necessary
- note that on windows you can auto format your JSX by pressing alt+shift+F
- you can obviously give your elements static content, just like regular HTML - meaning you specifically typed it in


Adding Basic CSS Styling
------------------------
- we still use CSS in React, but there is nothing too React specific when it comes to that CSS code
- we can just add a new CSS file
- typically the CSS file of a component is added next to the components JS file
- in the JS file of this component, import the CSS file so that the build process is aware of that CSS file and knows that it should be considered
- a CSS file is essentially a bunch of rules applied to a bunch of Classes/IDS/default selectors
- these classes/ids need to be added to the corresponeding JSX elements in order for them to be applied - CSS for default selectors are applied to the corresponding HTML tags in the JSX
- one thing to note that is different, is that when we want to add a class attribute to JSX, it is done using 'className' instead of 'class' like normal HMTL
- this is because JSX is still JavaScipt, and 'class' is a reserved word in JS (would still work but is bad practice)


Outputting Dynamic Data & Working with Expressions in JSX
----------------------------------------------------------
- you might want more than one of a certain component, eg. in a to do list, you might want multiple tasks
- you probably want these tasks to be simillar in style but have different values
- we want to be able to receive data from e.g. a user or an API and be able to display it dynamically
- this is not possible if you hardcode the values into your components, you need to make these values dynamic 

- this is where Reacts reusability is so powerful
- remember that React components are just a combination of JS, HTML and some CSS 
- so we can(and typically do) write some vanilla JavaScript code in our react components
- also remember that JSX is essentially JavaScript

- in our JSX there is a special syntax that allows us to write simple JS expressions within the HTML
- we use curly braces {}, what ever is written in these braces can be evaluated as basic JS expressions, as long as it's within the JSX
- this means we could insert things like 1 + 1, Math.random(), calculations and variables - and it would work
- this also means that we can get dynamic data from e.g. a user or an api in the function definition, store it in a variable then insert that variable into the returned JSX
- if we had a dynamic variable called 'expense' that got its value dynamically from a user, we could insert it into our JSX like this:
	e.g. <h2>{expense}<h2/>   // inserting a variable into jsx, done with curly braces

- note that trying to do this with a variable that hold something like a date object, will break the app
- this is because it can't be output as text
- we would have to take a property/method of the object - for example for a date object, the method  .toISOString(), which ouputs it as a string

This achieves the use of dynamic placeholders instead of just hardcoded values.
This can ultimately allow us to have multiple identical components with different data that is dynamically generated (more on this in a bit)


Passing Data via "props"
------------------------
- a component is reusable by default, meaning that you can copy and paste it as many times as you want inside of the root div of a component 
- however, the data of these components are the same - because the data is baked into the component

- thinking about normal JS 
	-> we also use functions to split functionality accross multiple smaller code bases
	-> we use functions to also have reusable functions which we can call multiple times
	-> when we write functions is JavaScript, we make these functions reusable by accepting parameters*
	-> this allows us to call the same function over and over but using different data (passed as different argument/parameter values)
	-> therefor the function may(and typically will) produce different results for different input values - even though it's still always the same function being called

- React basically has the same concept built in
	-> we can make our components reusable by using parameters and a concept called props*
	-> in order to do this, we store the data that we want to be dynamic in the 'parent' component of the component this data should be used in (like the child component)
	-> we do this instead of storing this data in the component itself (the child), we store it in the component that it is living in (the parent)
	-> However, components can't just use data stored in other components - we have to pass the data to the custom component
	-> so if a variable lives in the parent component, we need a way to pass it to the child component so it can be used there to define what is being output in that component
	-> we can do this by utilizing a concept called 'props'

	-> remember that we are basically building our own HTML custom elements, and just as HTML elements can have attributes, so can our custom HTML elements 
	-> we can pass data from a parent component to a child component by using attributes
	-> these attributes are set inside of the parent component, and set onto the child component within the JSX
	-> inside of that child custom component, we can get access to all these attributes that might have been set on our custom component
	-> in React, we call this concept 'props' instead of attributes - which simply stands for properties - in other words, we can set the properties of our own custom components

- How the props concept works
	-> we want to make these child components configurable from outside
	-> the data should not be stored inside of them, but instead be passed from outside, which we can do with the props concept 
	-> in the parent component, we can simply add attributes to the child custom html elements
	-> we do this the same way we would add attributes to a regular element
		> name of the attribute (can be named as we like)
		> followed by an equal sign
		> followed by the value we want the attribute to contain
		> this value can be hard coded, or it can be dynamic by using {} like mentioned before ( {} aka embeded expressions, can be used anywhere in JSX )
	
	-> once these attributes have been added to the child component in the parent file's JSX, it means we have essentially passed them
	-> now in the child components file, we have to access them in order to use them - we do this through parameters
	-> React insures that we get one parameter in every component that we use - which would be an object that holds all of the passed properties(attributes)
	-> This object is automatically passed as a parameter, however, we have to name it within the parenthesis in order to access it (kind of like events (e))
	-> we name this object 'props' (can be named anything but props is conventional), which is passed to the child component's function declaration as a parameter (in the child components file)
	-> naming it props makes it clear that it is the object that hold all the values we get from the attributes that were passed to our custom element in the parents JSX
	-> the prop contains key-value pairs
		> the keys will be the attribute names that were passed
		> the values will be the values set on those keys 
	
	-> you can access the values of these keys in the child component's JSX by using simple dot notation 
		eg	<h2>{props.keyName}</h2>

	-> this means we can now get all the data we need from outside of the component we want the data for

- this allows us to get all the data we need from outside the component
- So we're not defining the data inside of the child component (the component that ultimately uses the data in it's JSX directly)
- instead, the data is defined in the parent component, and passed into the child component through attributes
- we are then accessing these attributes in the child components file by accessing the props object using simple dot notation
- this makes components truly reusable and configurable (allows them to work like normal functions, in the sense that they provide different results based on the arguments(props) that are passed)


Adding 'Normal' JavaScript to Components
-----------------------------------------
- we could add JavaScript Logic directly to the JSX if we wanted to, and it would work fine
- however, this is not the best practice as it clutters the JSX, making it harder to see exactly what we are trying to output
- a better practice is to write our JavaScript logic before the return statement containing our JSX
- we figure out the more complex  logic, get the desired value from it and store the result in a variable
- we can then insert that variable into the JSX, which is a much more organized way of accomplishing this - easier to read


Splitting Components:
---------------------
- as a React project grows, your components eventually get bigger and bigger as you have more and more logic and JSX code in them - this happens naturally
- Reacts component concept allows you to split your code into smaller building blocks, where every component is focused on one core task
- we then build the overall user interface by combining these building blocks
- by doing this, we keep every component on its own relatively small and managable, as well as its code base  - and still build a complex UI
- this also makes the newly made component reusable in different parts of the project

- there is no hard rule on when to build a new component vs adding more to an existing component
- however, when you do feel that a component is getting too big/complex, you can split it up into smaller components where needed

- when doing this, we take the same steps as before to add a new component (naming conventions and all)
- once created, we can replace our old JSX with the new custom component after importing it into the file
- note that if there is no content between opening and closing tags of the custom component, you can just write it with a self closing tag

- the biggest takeaway from this is understanding that you can pass props from app.js to a child component, then from that child component to its own child component etc
- sometimes you need to make a component just to pass data to a another component inside of it, which is totally fine


The Concept of "Composition" ("children props")
-----------------------------------------------
- generally, the approach of building a user interface from smaller building blocks is called composition
- so far we have learned about highly specific components, which have exact intended outputs 
- these components are just configured through props (fairly standard, very common in react apps)
- sometimes, we want to have a component where you don't configure everything through props
- instead, we are able to pass content between the opening and closing tags of that component
- for now, we can refer to this as a shell component (or a wrapper component), because it will be used as a wrapper around other components (like a containter)

- Shell/Wrapper Components can help reduce code duplication
	-> the idea of having components is to have reusable building blocks, also to avoid code duplication
	-> sometimes our components share html structure or style, which is a form of duplication
	-> we can extract the styles that components have in common
	-> e.g. rounded corners and a drop shadow for a container of a list item, and the container of the list itself
	-> if two or more components have the same styles, we can extract those styles from their CSS files
	-> we can then create a seperate shell component with these extracted styles/structures e.g. Card (a container look with rounded corners, drop shadow - conventional name)

- Creating a 'shell' component essentially the same as creating a regular component
	-> the main thing that it does is return a div (or any other html container element)
	-> keep in mind that we are planning to use this component as a wrapper in order to apply shared styles(styles that are repeated)
	-> we give the div a specific className of our choice, e.g. card, to specify that we are styling it in a specific way
	-> obviously, the styles we want this shell component to have would be the shared styles we extracted from the original components
	-> we create a CSS file for the shell component and add these extracted styles to it
	-> in this CSS file, we use the className we chose for the div in the shell component earlier as a selector
	-> we then import this CSS file into the shell component
	
- The shell component acts as a container/wrapper
	-> now that its CSS file has been imported, the shell component will have the shared styles applied
	-> this shell component will not be configured through some attributes (props)***
	-> instead, we would replace the root div of our original components with this shell component (I use the term root div wrong here, but I mean the main div of the component when I say this)
	-> NOTE: might not even be needed as the main div, could maybe even be used as a child div, im not sure - but it is just a container so it makes sense that it would
	-> this allows us to get these predefined styles automatically
	-> in order to be able to use this shell component in another component, we need to import the shell components file
	-> but we need another step to make this work, because by default, you can't use custom components as wrappers around content 
	-> wrapping content only works for built in HTML elements by default

- However, we can build custom wrapper components 
	-> we do this by passing the props object in the shell component's function declaration
	-> instead of using passed attributes like we normally would, we instead use a special prop 
	-> this prop is built in to react, which every component receives, even if you're never setting it explicitly
	-> the prop is is props.children, a property of the prop object
	-> 'children' is a reserved name
	-> the value of 'children' is the content between the opening and closing tags of your custom component
	-> we insert props.children as an embedded expression within the shell components root element 
	-> this is a variable that represents the content that the shell component will be wrapped around when used in other component files

- This will allow content to show up, but the rest of the styles will not be applied
	-> remember that in the original components file (the ones we extracted styles from), the original container usually has it's own className
	-> this className corresponds to its own CSS file, where it gets all the styles that are unique to it (the ones we didn't extract)
	-> at this point of the process, these styles are not applied to the shell component that replaced the original container element
	-> the className might be passed as a prop to our shell component, however, we aren't telling our shell component what to do with it at this point

- there is another step to take before our original components unique styles are applied to the shell component
	-> remember that the shell component is a custom component defined by us 
	-> all the default HTML elements support className for adding CSS classes to the rendered HTML elements
	-> however, your custom components only support what you tell them to support
	-> if you want to make sure that a className can be set on your shell component and then also has an effect, we have to tweak the code in that component
	-> this is simply achieved by setting what ever we have set as a className on the shell component(passed as a prop), to the className string we're setting on the container element in the shell component file 
	
	-> since we are passing the className as a prop to our shell component, we can access it in our shell component file
	-> we can add the value of the passed className prop to our shell component's container element's className list, which is a string
	-> we can simply create a classes variable, add our shell compenent class with our passed className prop value
	-> we then add this classes variable as an embedded expression to be the value of our shell component container's className value 

- this allows you to get the same look as before but also have a reusable wrapper component that can be used in multiple places in the codebase
- this also allows us to extract some code duplication from inside our css files into this seperate wrapper component
- we also are able to extract some HTML/JSX code (more useful when wrapper components are more complex like with modals and alerts)
- in a lot of cases, being able to extract that saves a lot of code duplication and often allows you to keep your other components clean


A First Summary
---------------
- Components are the most important concept in React
- in React, we build user interfaces by building and combining components
- React introduces its own core syntax and JSX
- it involves building, using, and working with components and props
- it allows us to share data accross components through this props concept

- with all these components we are building, in the end we are just splitting up all of our code accross multiple files and building blocks
- so if we want to have more than one of a component, we can just use that component multiple times - instead of repeating the JSX multiple times
- in the end, what ends up on the screen are just default html elements 
- if you inspect the webpage, you don't see your custom components, its just <divs> - though the classes are still there
- these custom components are not really html elements, they're just used in our code


A Closer Look at JSX
--------------------
- our current project set up allows us to create these components without importing the third party React library for every single file
- this is because of modern project set up 'magic'
- back in the day we, we had to import React in every single component file if we wanted to use it
- we also had a different syntax, there was no JSX, there were simply methods of React being called to create elements
- JSX is syntactic sugar, which behind the seens, is just calling these methods
- React.creatElement can only create one element at a time, but can take an object of properties to be added to that element
- it can also take an infinite number of arguments that represent the nested elements
- this is why we can only have one root element per component, because in the end - we are just using this method - which can only create one element at a time (though more can be nested)


Organizing Component Files
---------------------------
- organizing your component files becomes more necessary the more components you have
- instead of just having one components folder, it might be a good idea to have sub-folders
- e.g a folder for general UI components,  a folder for a specific feature like a group of components that deal with rendering expenses and expense data
- after doing this, make sure to update all your imports
- this is really just done to keep components and files organized, instead of keeping them in one big folder
- the way you organize these files is up to you (and your team)


An Alternative Function Syntax
------------------------------
- we know we can use function declarations to create components
- we can also use function expressions
- this means we can also use arrow functions, which looks cleaner to some people
- doesn't offer any benefits to what we've covered so far, its really just personal preference