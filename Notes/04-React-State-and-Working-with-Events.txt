Intro
-----
- we learned about components and props, time to take the next step
- in this module, we will look at user interaction and handling user events (clicks, inputs in text fields, etc.)
- going to look at the very important concept of state in React apps
- remember that in React, we follow a declarative approach 
	-> we define our desired target state
	-> React takes care of reaching that state

- we want to have applications that are interactive so that they can react to clicks by the user, and to data being entered by the user etc.
- we want it to be reactive as well, so that things change when certain things happen

- we will be:
	-> learning about handling events
	-> Updating the UI & Working with 'State'
	-> Taking a closer look at Components & State


Listening to Events & Working with Event Handlers
--------------------------------------------------
- On all built in HTML elements, we have full access to a number of native DOM events which we can listen for  
	-> on every element, there are a bunch of events we can listen for
	-> for every default event there is a prop equivalent in React
	
- we can add these props to the built in HTML elements to listen to these events
	-> we do this by going to the HTML element we want to add a listener to(e.g. a button), and adding a special prop
	-> this is not a prop that sets some value for the element
	-> this is a prop that starts with 'on'
	-> React exposes all these default events as props which start with 'on'
	-> e.g. for a click event, it would be 'onClick'
	-> this would add an event listener for a click event on the element that we passed it to as a prop

- we just need to define what happens when the click event occurs
	-> we do that by assigning a value to the onClick prop
	-> the value has to be a function that should be executed when the click occurs

- all of these event handler props (on props) want a function as a value which is then executed when that event occurs
	-> the function can be created on the fly as embedded code - but we don't usually like to do in line complex logic, makes the JSX less readable
	-> we typically want to define our function before the return - then use its identifier in the embedded code instead
	-> note that we are not calling/executing the function in the embedded code, just pointing at it

- all default HTML elements have access to events, some have access to more than others
	-> if an element supports an event, then you can add a listener with React by adding  'on' + the event name prop

- the convention for naming these functions are to end with 'Handler' if it is handling an event
	-> e.g. 'clickHandler' is a good name for a function that handle click events
	-> just a preference, makes it clear that it is not a function called by us somewhere else in our code, but a function that is attatched to an event listener


How Component Functions are Executed
------------------------------------
- reacting to events is an important first step, now - how can we change what shows up on the screen?
	-> lets say we are listening for a click on a button, when the event happens it will change some content - like a title
	-> lets say the title is currently gets its value from props.title 
	-> for the content that you want to be dynamic, we don't want it to be set directly as a prop
	-> instead, we want to create a variable and assign it the value of the prop
	-> we can then have this variables value changed when an event happens by defining this behavior in the event handler
	-> this changes the value of the content once the even is triggered - however, we won't see the change reflected on the webpage...
	-> note that the value has actually changed, it just hasn't rendered... why you ask?

- we still need another step before this works, and this is because of how React parses JSX
	-> keep in mind that your component is a function
	-> the only special thing about this function is that it returns JSX
	-> since its a function, someone has to call it - and we never call these components explicitly
	-> this actually happens behind the scenes, and is how React really works

	-> our App component is a function that returns JSX, every component nested inside the App component is also a function that returns JSX
	-> when our webpage is visited, the React app is loaded
	-> it might not look like it because of syntactic sugar, but in our index.js - we are actually calling that App component
	-> this subsequently ends up calling all the nested components which end up returning JSX, which eventually get rendered to the page
	-> the problem with this is that it renders once (initial render, using the initial data)
	-> so when we change the content of something after this render has happened, it will not appear on the screen, because it has already rendered in its original state
	-> in order for the change to appear, it would need to re-render again
	-> we need a way of telling react that something changed and that a certain component should be re-evaluated
	-> this is where react introduces a special concept called state


Working with State
------------------
- state is not actually a React specific concept, but it is a key concept in React as well

- our components are only called and executed once which causes the page to render
- even if the value of a variable responsible for some content changes, by default, this change wont be reflected because it happens after the initial render
- at the moment, the click event doesn't tell React to re-render the component 
- in other words, our component function is never executed again, and it's JSX is never re-rendered with the new content value
- in order to add this functionality to React - we need to import something from the React Library

- we do this by adding a so called 'Named' import called 'useState'
- so far we have imported the default import from React, but we can import specific things that are not included in this default import
	e.g	import React from 'react';		// default import
	e.g.	import React, {useState} from 'react;	//adding a named import in order to add a specific functionality, in this case - the function 'useState'

- useState is a function provided by the React library
	-> it allows us to define values as state
	-> this means that changes to these values should reflect(result?) in the component function being called again
	-> this is a key difference between using a regular variable to store content value
	-> we use this useState function by calling it inside of our component function

- useState is a so called 'React hook'
	-> there are other hooks as well, but useState is one of the most important ones
	-> all the react hooks can be identified by the fact that they start with the word 'use' in their name
	-> all these hooks must only be called INSIDE of React components (the function definition)
	-> they cant be called OUTSIDE of the component
	-> the also can NOT be called inside any NESTED functions within the component
	-> the MUST be called DIRECTLY inside such component functions

 - useState requires a default state value
	-> with useState, we basically create a special kind of variable (stored in a different place in memeory, managed by react)
	-> if this variable changes, it will lead to the component function being called again
	-> we therefor assign an initial value for that special variable 
	-> we can pass it a value of the relevant prop, 
	-> e.g. if we wanted to change a title, we could pass props.title (assuming thats how we set it up) - which it uses to create the special variable
	-> useState also returns something that gives us access to this special variable - meaning we can use it later
	-> it also returns a function which we can then call to assign a new value to that variable 

	-> this means that we will not be assigning values with the equal sign
	-> instead we will be assigning new values by calling a function

- useState actually returns an array, it actually always does this
	-> the first value is the value of the special variable itself - representing the current state value	
	-> the second value of the array is the updating function - to update the state
	-> we can use array destructuring to store both values into seperate variables or contants
		eg. const [title, setTitle] = useState(props.title);
		-> naming these constants are up to you
		-> the convention is to use names that describe the value for the first variable
		-> the convention is to use 'set' followed by the first variable name as the second variable name(camel case)
	

- This allows us remove our previous variable that we used to define the content we wanted to be dynamic, and replace its functionality..
	-> remember, within the handler function, we are not setting a value using the equal sign
	-> instead, we assign a new value by calling the state updating function
	-> remember that this is the 2nd value we destructured from the return of the useState function from earlier
		-> in our previous example, we would be calling the 'setTitle' function
	-> we pass the value we want the state variable to be update to, e.g. 'updated!'
	
- calling the state updating function does not just assign a new value to some variable(its a special variable)
	-> it's managed by React somewhere in memory
	-> when we call the state updating function, this special variable will not just receive a new value
	-> the component function in which you called this state updating function, and in which you initialized your state with useState...
		-> will also be executed again
		-> which is what we need to re-render the new value of the content
	-> we want to call this component function again when our state changes
	-> by calling this state updating function, this is happening
	-> by calling this function you're telling React that you want to assign a new value to this state
		-> that then also tells React that the component in which this state was registered with useState should be re-evaluated
		-> therefor react will go ahead and execute this component function again , therefor also evaluating the JSX code again
		-> it will then draw any changes it detects compared to the last time it evaluated this - on to the screen

This means that the changed content will now re-render onto the screen!

Note:
- calling the state updating function actually doesn't change the value right away
- instead it scheduals this state update
- so in the very next line there after, the new value isn't available yet
- because of this, if we console.log the variable right after we call the state updating function - we would see the old value 

- but we do see that eventually the component is called again and is evaluated again, and that therefor we see our updated value on the screen
- if you have data that might change, and where changes to that data should be reflected on the UI, then you need State
- because regular variables will not do the trick
- with state however, we can set and change values - and when they do change - React will re-evaluate the component in which the state was registered
- AND ONLY that component, btw, not any other components  


A Close Look at the 'useState' Hook
------------------------------------
- remember that we used a const to store the deconstructed value of the array that is returned by the useState() function (giving use our state variable and update state function)
	-> useState registers some value as a state for the component in which it is being called
	-> to be more precise, it registers it for a specific component instance
		-> for example, if a listItem component is used multiple times within another list component
		-> each one of these list items is a seperate instance of the listItem component, though they have the same function definition
		-> this means every item receives its own separate State which is detatched from the other States (assuming useState is used within the component)
		-> there is one component definition, however, that definition is called multiple times - once for every instance
		-> every time it's called, a new separate State is created (in the same way, but managed independently by React)
		-> this means that if we change some content in one instance, the others ones are not effected - because they have their own state
		-> its on a per component instance basis - important to keep in mind

	-> in addition, whenever State changes, it's only the component function, and only that specific instance(where the component is being used) where React will re-evaluate it

- but why are we using const when we do eventually assign a new value?
	-> keep in mind that we are not assigning value with the equal sign - that would indeed fail
	-> when we update a State, we call the state updating function
	-> the concrete value is simply managed somewhere else(?) by React
	-> by calling useState, we tell React that it should manage some value for us - we never see that variable itself
	-> therefor we just call a function, and we never assign a new value to the state variable with the equal operator
	-> therefor, using a const is absolutely fine

- how do we get the latest title value then?
	-> keep in mind that the component function is re-executed when the state is updated
	-> which means that the line of code that we use to deconstruct the useState returned array value is also executed again
	-> so if we call the state updating function, and we assign a new value for the state (which React manages somehwere else)
		-> it leads to the component being called again
		-> therefor, the new value of the state is fetched from React (which manages the state for us) 
		-> and the 1st variable we are using to hold the deconstructed return value of useState is updated(technically assigned) with this value 
		-> so we always get a brand new snap shot of that state when the component function re-executes

- you might be wondering if this means that we always overwrite any state changes with our initial value passed to useState() 
	-> the answer is no
	-> this is because React keeps track of when we call useState in a given component instance for the first time
	-> when we call it for the first time ever, useState takes the argument you passed as the intial value for the State variable
	-> however, if a component is then re-executed because of a State change, React will not reinitialize the State with that argument
	-> it will instead detect that this State had been initialized in the past - and will just grab the latest state, and give us that state instead

- there is a lot of details on how state works under the hood, in a nutshell though - using state is simple
	-> you just register state with useState()
	-> you always get back two values: the value itself and the updating function
	-> you call the function whenever the state should change
	-> and you use that first element (the state variable) when ever you want to use the state value e.g. for outputting it in the JSX code
	-> React will do the rest
		-> it will re-execute the component function, and re-evalute the JSX code when ever the state changes

- state is such an important concept because it adds reactivity to our application
- without state, our user interface would never change 
- with state, and with listening to events, we can make sure that we can react to user input
- and that such input can result in a visible change on our screen


State can be updated in many ways:
- Thus far, we update our state upon user events e.g. upon a click
- that's very common but not required for state updates
- you can update states for whatever reason you may have
- another example is waiting for Http request to complete - updating the state based on the http response we get back
- can also update state because of a timer


Adding Form Inputs
------------------
- we have the capability to gather user input 
- note that we have different groups of components which should be sorted into different folders
- for example, we might have a folder for components that display data, and another folder for components that collect user data

- we can gather user inputs by using a component that returns a form
- creating the component is pretty straight forward, its the same process we have already covered:
	-> creating the component file, naming it appropriately 
	-> importing the correct things (react library and css)
	-> writing the JSX that we want to return 
	-> exporting it correctly
- other than this, its pretty straight forward HTML basics that we are writing within our JSX in order to create the form
	-> a form container
	-> other containers for structure if needed (check our project, we actually use a 'controls' wrapper, with other 'control' wrappers around each input and label pair)
	-> we obviously have the our desired classNames and styles on these elements
	-> we have input and label pairs where our user can enter values
	-> a button to submit the form

This is crucial groundwork, however, everything so far is basic html (maybe some confusing stuff, nothing too compicated - check the project)
	-> maybe brush up on the default html attributes for input elements if needed

Once we have created our form component, we can then use our form component in app.js within it's JSX
- import it to app.js using the correct pathing
- use the custom html form element in the desired location

We now have a form component, however, the component is not doing anything
- our next goal is to make sure we can gather the inputs that the user provides
- we do this so that we can log these values to the console (for a start) 
- the next step would be to take the gathered input values and combine them into a new expense object

 
Listening to User Input:
------------------------
- we simply add listeners to the input elements that we want to listen for a change
- we can do this by adding a prop that starts with 'on', as we've learned previously - followed by a relevant default JS event
- we can use onInput which reacts to every keystroke
- there is also the onChange event which does the same thing, but works on all input types including things like dropdowns
- once we pick an event to listen too, we have to now point at a function that will be executed when this event occurs
- this function should be defined within the component function, before the return - assigned to a variable which we then use as embedded code that represents the function we want to be executed

- now remember that in vanilla javascript, within our event handler - we can get access to an event object that describes the event that occurs
- this event object is automatically available, you have to create an identifier for it in the parameter of the event handler's definition to use it though (e or event is the convention)
	-> this process is simillar to getting access the the props object that all components have
- this is the case with our event handler that we are pointing to in our input element
	-> since we passed this function to react through the onChange prop - react and the browser will make sure that we get such an event object when this change event occurs 
	-> we can log this object to see what is inside it
	-> a useful property of this object would be event.target.value 
		-> target points at the DOM element at which the event occurs
		-> the input element has a long list of properties, one of which is 'value'
		-> this value property holds the current value of this input at the point of time this event occurs


Working with Multiple States
----------------------------
- we can listen to multiple user inputs by adding listeners to multiple input elements
- we can use the values returned by the events we are listening to in diffferent ways
- one way to use these values is to store them for later, so that when the form is submitted - we can use these values
- an example would be to store /track all values for all inputs and then combine them all into an object once the form is submitted 
- one way of storing the value and ensuring that it persists (even if the component function is re-executed) - we can use State

- we would just have to set the initial state for the input element we are tracking to an empty string (using useState function before the return statement)
- its an empty string intially because when the input elemnt is rendered for the first time, nothing will be entered by default
	-> note that when you listen to a change event for an input, if you read the value of that input element - it will always be string
	-> even if it stores a number or a date, it will be a number as a string
- remember that we destructure the returned value of the useState function, which always returns an array with 2 values that represent the state value, and the updating state function
- we name these with relevant names e.g. for a title input element, we would name it's state variable 'enteredTitle' and the function 'setEnteredTitle'
- we can then add this state updating function within the input element's event handler's function definiton
- we would pass the event.target.value as the argument for the state updating function - thus keeping track of the current value entered and updating it to the State
- note that we are not doing this in order to re-execute the componenet, however, it will be re-executed anyways 
- for the moment, our purpose of doing this is to make sure the user input data persists
- there are other ways to do this, but this way works great

- this can be done for multiple user inputs at a time, using the same process (obviously naming identifiers respectively)
- we can call useState multiple times in the same component, this does not cause any issue
- essentially, we can create a seperate state for each of our input elements data, and use the event listener/handler on that element to keep it updated

- using multiple states in the same component is something that is common and that is absolutely ok
- we can have this seperate states and update and manage them separately
- there is the question of if we should use multiple states vs a single state ... 


Using One State Instead, whats better?
--------------------------------------
- we could use one state instead of multiple states
- this is done by calling useState only once - and passing in an object as an argument
- in this object itself, you could group together your three states
- this is done by making a key-value pair for the data of the input element you want to track e.g. title: '',
- the logic is simillar but instead everything is now in one state object managed as one piece of state

- the difference now is that whenever you update this state you need to update all three properties and not just one
- we deconstruct the return of useState as usual, the value we receive represents the State value - which is the object that holds our input key-values
- within each of our event handlers for the different input elements we are keeping track of:
	-> we call our stateUpdating function (which will update our state value - which is the object mentioned before)
	-> we pass it an object (to allow it to continue functioning as a single state)
	-> we then spread(...) our current state object (if we skip this step, we will overwrite the entire state with a single value - no beuno)
	-> we then overwrite the relevant key-value pair for the event we are handling 
	-> this gets the job done, however it is not perfect yet (will revisit soon)

- both single state and multiple state are valid to use, its up to personal preference which one to choose 
- individual state slices are more common to come accross, Max likes to use these - I do to 
	-> seems like less code in the end, less complexity in terms of not having to deal with an object
	-> also allows other advantages when in comes to naming and storing these values in a data object later down the line


Updating State that Relies on the Previous State
-------------------------------------------------
- the way we update our single state above is not entirely correct
	-> it technically would work, but in niche cases it could fail
	-> it's simply not a good practice to update state like this
	-> we are depending on our previous state for updating the state in the single state approach
	-> this is because we are copying the values from our previous state in order not to lose them, and just updating the relevant value

- when ever we update state, and we depend on the previous state 
	-> for e.g. in the single state approach OR if we were managing a counter
	-> we should use an alternative form of the state updating function
	-> we call it the same way, but we pass in a function to the state updating function
	-> for the function that we passed, we give it an argument that we call 'prevState' 
	-> 'prevState' arugment represents a snapshot of the previous state for which you are calling the updating function
	-> within this passed function, we should return the new state
	-> in the above case single state case, it should be an object 
	-> within this object we would spread the prevState argument (copying our old objects key-value pairs)
	-> then we overwrite the relevant value

- we do it this way because of how react updates the state
	-> keep in mind that react schedules state updates, it doesn't perform them instantly
	-> therefor, theoretically if you schedule a lot of state updates at the same time, you could be depending on an outdated or incorrect state snapshot using our original approach
	-> if we use our new approach, react will gaurantee that the state snapshot it gives you (prevState) will always be the latest state snapshot
	-> it does this while keeping all scheduled state updates in mind
	-> this is the safer way to insure that we always operate on the latest state snapshot

- this is a key concept that we will run into when using react


Handling Form Submission
------------------------
- so far, we've been over how to collect data as well as how to insure that data persists using State
- because we have the ability to collect and store data, we can now utilize it (manipulate and move) as well

- one way to utilize this data is to combine them into a single object - allowing us to manipulate/move all the user input together 
	-> a simple example is combining the data into an object, then console logging it
	-> we could also enrich this data or move it to another component (more on this later)

- assuming our input elements are contained within a form element, we can program the utilization of our collected user input data through the 'submit' event
	-> this is a default behavior built in to the browser and built into forms
	-> the submit event is an event available to forms that we can listen to
	-> it is triggered when a button element on a form with this event listener is clicked
	-> this button usually has the type of submit (type is a property)
	-> this causes the overall form element to emit the submit event - which we can listen to
	-> we add this listener to our form element's attributes (onSubmit)

- like every event listener, we pass a handler function to handle the event when it occurs
	-> as usual, we define our event handler in our component function definition before our return statement
	-> this is a default browser behavior, part of this default behavior is to reload the page when the event happens
		-> the browser automatically sends a request whenever a form is submitted to the server which is hosting the webpage
 		-> this is usually not the behavior that we want
		-> instead, we want to handle the submission with JS, and manually collect and combine the data in order to do something with it
		-> thankfully we can prevent this default behavior
	-> remember that an event object is created and passed to our handler when an event we are listening for occurs
		-> on this object, we can call a method that prevents its default behaviour
		-> the method below will prevent the default behavior of the page reloading (because it prevents any request that would have been sent due to this event)
		-> this allows us to coninue handling this with JS
		e.g. event.preventDefault();  
	-> we can then create a new variable that holds an object where we can store all of our collected data (using our desired identifiers - with their values as the collected data)
	-> for dates, the value we would assign would be the new Date() function
		-> we would then pass the date data that we collected from the relevant user input element (which is always a string)
		-> this parses the date string and converts it into a data object
	-> if we are intending on storing a collected value as a number in order to use it for calculations later, we want to add a + before storing it in order to coerce its type to number


Adding Two Way Binding
-----------------------
- once we have submitted and collected the data, we probably want to clear the input fields on the webpage
- since we are using state to keep track of the data, we have an advantage
- we could have used global variables outside of the component function if we just wanted to persist the values

- since we used state, we can implement something called two way binding
	-> this simply means that for inputs we don't just listen to changes - but we can also pass a new value back into the input
	-> this allows us to reset or change the input programmatically

- in order to implement two way binding all we have to do is add the value attribute to an input element
	-> this attribute sets the internal value property (which every input element has)	
	-> this allows us to set it to any value we want
	-> we set this value to the state value of the input element 
	-> this is now two way binded
		-> now we don't just listen to changes in the input to update our state
		-> we also feed the state back into the input
		-> now, when we change the state - we also change the input
		-> this might sound like an infinite loop but it actually isnt - there is no problem there

- the advantage of having an input element two way binded
	-> we can call the state updating function for the data associated with the input element at the end of the submit handler
	-> when we do this, we can set the value of the state back to an empty string
	-> this will reset the input field in our UI




---skipped some notes, go back and take them---


Controlled vs Uncontrolled Components & Stateless vs Stateful Components
------------------------------------------------------------------------
- when ever you use two way binding you are controlling a component
- we can even control our own custom component(look at the practice for this section.. ExpensesFilter.js two way binding between two custom components)
	-> we can listen for an event in a child component's input element
	-> pass the relevant event data to the parent component (through props)
	-> handle that event in the parent
	-> pass the result back to the child component (through props)
	-> use that result as the value attribute for our child component's input element

- this means that the value which is used in the child component (such as a value selected in a drop down) is passed on to a parent component through props and is received from the parent component
	-> both the currently set value, as well as the function which in the end handles the selected value is not part of the child component
	-> the child component is really just a component that presents the UI
		-> also attatches a couple listeners or props
	-> the real logic resides in the parent component
	-> that turns this child component into something which is called a 'controlled component'

- technically there is no difference
	-> this controlled component is still a regular component	
	-> its just a special term that when you see it basically means:
		-> both the value and changes to the value are not handled in the component itself, but in a parent component
	-> essentially, the parent component controls the child component

- Another term/concept you should be aware of is about presentational verses stateful components
	-> aka stateless vs stateful components.. or dumb vs smart components
	-> in basically all React apps which you're building, you will have a couple components that manage some state
	-> you will also have other components that don't manage any state
	-> in most React applications you will have more presentational/dumb components than smart/stateful components
	-> dumb and smart are just terms, they are not negative or positive 

- you want to split up your application into small reusable pieces
	-> most components will only focus on outputting something
	-> only a couple of components typically do manage state, which is then spread out and distributed through props


